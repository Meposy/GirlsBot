# pyright: reportUnusedImport=false
# pyright: reportUnknownMemberType=false
# pyright: reportUnknownArgumentType=false
# pyright: reportOptionalMemberAccess=false

import re
import pickle
import os
from collections import defaultdict
from typing import Optional, Union, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (Application, CommandHandler, MessageHandler,
                          CallbackQueryHandler, ContextTypes, filters)

# –¢–∏–ø –¥–ª—è reply_markup
ReplyMarkupType = Optional[Union[InlineKeyboardMarkup, Any]]

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "bot_data.pkl"


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def load_data():
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, "rb") as f:
                data = pickle.load(f)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º viewed_ankets –æ–±—Ä–∞—Ç–Ω–æ –≤ defaultdict
                data['viewed_ankets'] = defaultdict(set, data['viewed_ankets'])
                return data
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    return {
        'user_ankets': {},
        'banned_users': set(),
        'viewed_ankets': defaultdict(set),
        'ankets_list': []
    }


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data():
    try:
        data = {
            'user_ankets': user_ankets,
            'banned_users': banned_users,
            'viewed_ankets': dict(viewed_ankets),  # defaultdict -> dict
            'ankets_list': ankets_list
        }
        with open(DATA_FILE, "wb") as f:
            pickle.dump(data, f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
data = load_data()
user_ankets = data['user_ankets']
banned_users = data['banned_users']
viewed_ankets = data['viewed_ankets']
ankets_list = data['ankets_list']
ANKETS_PER_PAGE = 5


def is_admin(user_id: int) -> bool:
    return user_id == 1340811422  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID


async def safe_reply(update: Update,
                     text: str,
                     reply_markup: ReplyMarkupType = None) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if update.message:
            await update.message.reply_text(text, reply_markup=reply_markup)
        elif update.callback_query and update.callback_query.message:
            await update.callback_query.message.reply_text(
                text, reply_markup=reply_markup)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user:
        return

    user_id = update.effective_user.id
    if user_id in banned_users:
        await safe_reply(update, "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")
        return

    text = ("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞–º–∏.\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/add - –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n"
            "/view - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã\n"
            "/delete - –£–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É\n"
            "/help - –ü–æ–º–æ—â—å")
    await safe_reply(update, text)


async def add_anket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user:
        return

    user_id = update.effective_user.id
    if user_id in banned_users:
        await safe_reply(update, "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")
        return

    if user_id in user_ankets:
        await safe_reply(update,
                         "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Ç–µ–∫—É—â—É—é")
        return

    await safe_reply(
        update,
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google Forms –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
    if context.user_data is None:
        context.user_data = {}
    context.user_data['awaiting_anket'] = True


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_user:
        return

    if not context.user_data.get('awaiting_anket', False):
        return

    text = update.message.text.strip()
    if not text:
        await safe_reply(update, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    parts = text.split(maxsplit=1)
    if len(parts) < 2:
        await safe_reply(update, "‚ùå –ù—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞ –ò –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        return

    url, comment = parts
    if not re.match(r'^https:\/\/(docs\.google\.com|forms\.office\.com)\/.+',
                    url):
        await safe_reply(
            update, "‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Forms –∏–ª–∏ Microsoft Forms")
        return

    user_id = update.effective_user.id
    user_ankets[user_id] = (url, comment)
    ankets_list.append((user_id, url, comment))
    save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if context.user_data is None:
        context.user_data = {}
    context.user_data['awaiting_anket'] = False


async def view_ankets(update: Update,
                      context: ContextTypes.DEFAULT_TYPE,
                      page: int = 0):
    if not update.effective_user:
        return

    user_id = update.effective_user.id
    if not ankets_list:
        await safe_reply(update, "üò¢ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç")
        return

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∫–µ—Ç
    unseen = [
        i for i, (uid, _, _) in enumerate(ankets_list)
        if uid != user_id and i not in viewed_ankets[user_id]
    ]

    if not unseen:
        await safe_reply(update, "‚ú® –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã!")
        return

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = []
    for idx in unseen[page * ANKETS_PER_PAGE:(page + 1) * ANKETS_PER_PAGE]:
        _, url, comment = ankets_list[idx]
        btn_text = f"–ê–Ω–∫–µ—Ç–∞ {idx+1}: {comment[:30]}..."
        keyboard.append(
            [InlineKeyboardButton(btn_text, callback_data=f"view_{idx}")])

    # –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –∞–Ω–∫–µ—Ç—ã
    if len(unseen) > (page + 1) * ANKETS_PER_PAGE:
        keyboard.append(
            [InlineKeyboardButton("–î–∞–ª–µ–µ ‚Üí", callback_data=f"page_{page+1}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await safe_reply(update,
                     "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                     reply_markup=reply_markup)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.callback_query or not update.effective_user:
        return

    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    data = query.data

    if data is None:
        print("Error: data is None")
        await safe_reply(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        return

    if data.startswith("view_"):
        idx = int(data[5:])
        _, url, comment = ankets_list[idx]
        viewed_ankets[user_id].add(idx)
        save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await query.edit_message_text(
            f"üîó –°—Å—ã–ª–∫–∞: {url}\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
            "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /view")
    elif data.startswith("page_"):
        try:
            page = int(data[5:])
            await view_ankets(update, context, page)
        except (ValueError, IndexError) as e:
            print(f"Error processing page data: {e}")
            await safe_reply(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")


async def delete_anket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user:
        return

    user_id = update.effective_user.id
    if user_id not in user_ankets:
        await safe_reply(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    del user_ankets[user_id]
    ankets_list[:] = [a for a in ankets_list if a[0] != user_id]
    save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await safe_reply(update, "‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = ("üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
                 "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
                 "/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É\n"
                 "/view - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã\n"
                 "/delete - –£–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É\n"
                 "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
                 "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–Ω–∫–µ—Ç—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, "
                 "—á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    await safe_reply(update, help_text)


def main():
    try:
        TOKEN = "7820852763:AAFdFqpQmNxd5m754fuOPnDGj5MNJs5Lw4w"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
        application = Application.builder().token(TOKEN).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        handlers = [
            CommandHandler("start", start),
            CommandHandler("add", add_anket),
            CommandHandler("view", lambda u, c: view_ankets(u, c, 0)),
            CommandHandler("delete", delete_anket),
            CommandHandler("help", help_command),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
            CallbackQueryHandler(button_handler)
        ]

        for handler in handlers:
            application.add_handler(handler)

        print("üü¢ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling()
    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞: {e}")
    finally:
        save_data()  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏


if __name__ == "__main__":
    main()
