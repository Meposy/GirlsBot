import re
import pickle
import os
import time
import asyncio
import signal
import sys
import logging
from datetime import datetime
from collections import defaultdict
from typing import Optional, Union, Any
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from flask import Flask, request
import telegram
from telegram import __version__ as telegram_version

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ======
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ====== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ======
DATA_FILE = "bot_data.pkl"
CHANNEL_ID = "@VLV_LP"
POST_COOLDOWN = 3600
BANNED_WORDS = ["—Ç—É–ø–∞—è", "–¥—É—Ä–∞", "–±–ª—è—Ç—å"]
ADMIN_ID = 1340811422
YOOMONEY_LINK = "https://yoomoney.ru/to/4100118961510419"
ANKETS_PER_PAGE = 5
TOKEN = os.getenv('TELEGRAM_TOKEN', '7820852763:AAFdFqpQmNxd5m754fuOPnDGj5MNJs5Lw4w')

# –¢–∏–ø –¥–ª—è reply_markup
ReplyMarkupType = Optional[Union[InlineKeyboardMarkup, Any]]

# ====== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ======
def load_data():
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, "rb") as f:
                data = pickle.load(f)
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
                data['viewed_ankets'] = defaultdict(set, data.get('viewed_ankets', {}))
                data['last_post_times'] = data.get('last_post_times', {})
                data['channel_posts'] = data.get('channel_posts', {})
                return data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    return {
        'user_ankets': {},
        'banned_users': set(),
        'viewed_ankets': defaultdict(set),
        'ankets_list': [],
        'last_post_times': {},
        'channel_posts': {}
    }

def save_data():
    try:
        data = {
            'user_ankets': user_ankets,
            'banned_users': banned_users,
            'viewed_ankets': dict(viewed_ankets),
            'ankets_list': ankets_list,
            'last_post_times': last_post_times,
            'channel_posts': channel_posts
        }
        with open(DATA_FILE, "wb") as f:
            pickle.dump(data, f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data = load_data()
user_ankets = data['user_ankets']
banned_users = data['banned_users']
viewed_ankets = data['viewed_ankets']
ankets_list = data['ankets_list']
last_post_times = data['last_post_times']
channel_posts = data['channel_posts']

# ====== Flask App ======
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is alive!"

@app.route('/health')
def health():
    return "OK", 200

@app.route(f'/{TOKEN}', methods=['POST'])
async def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram"""
    if request.method == "POST":
        json_str = await request.get_json()
        update = Update.de_json(json_str, application.bot)
        await application.process_update(update)
        return "OK", 200
    return "Method not allowed", 405

def run_flask():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask —Å–µ—Ä–≤–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    port = int(os.environ.get('PORT', 10000))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è Flask
    flask_log = logging.getLogger('werkzeug')
    flask_log.setLevel(logging.WARNING)
    
    logger.info(f"üü¢ Flask –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    try:
        from waitress import serve
        serve(app, host="0.0.0.0", port=port, threads=1)
    except ImportError:
        logger.warning("‚ö†Ô∏è Waitress –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º dev-—Å–µ—Ä–≤–µ—Ä")
        app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)
    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ Flask: {e}")

# ====== Telegram Bot Functions ======
def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

def log_action(action: str, user_id: int, details: str = ""):
    with open("actions.log", "a", encoding='utf-8') as f:
        f.write(f"{datetime.now()} | {action} | User {user_id} | {details}\n")

async def safe_reply(update: Update, text: str, reply_markup: ReplyMarkupType = None):
    try:
        if update.message:
            await update.message.reply_text(text, reply_markup=reply_markup)
        elif update.callback_query and update.callback_query.message:
            await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def publish_to_channel(user_id: int, url: str, comment: str,
                           context: ContextTypes.DEFAULT_TYPE):
    try:
        user = await context.bot.get_chat(user_id)
        username = f"@{user.username}" if user.username else f"ID:{user_id}"

        message = (f"üìå –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç {username}:\n\n"
                  f"{comment}\n\n"
                  f"üîó {url}\n\n"
                  f"#–∞–Ω–∫–µ—Ç–∞ #–∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞")

        sent_message = await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=message,
            disable_web_page_preview=True
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª! ID: {sent_message.message_id}")

        channel_posts[user_id] = sent_message.message_id
        save_data()
        return True
    except telegram.error.BadRequest as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (BadRequest): {str(e)}")
        return False
    except telegram.error.Unauthorized:
        logger.error("‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É")
        return False
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
        return False

# ====== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user:
        return

    user_id = update.effective_user.id
    if user_id in banned_users:
        await safe_reply(update, "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")
        return

    text = ("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞–º–∏.\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/add - –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n"
            "/view - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã\n"
            "/delete - –£–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É\n"
            "/help - –ü–æ–º–æ—â—å\n"
            "/help_create - –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É\n"
            "/donate - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")

    if is_admin(user_id):
        text += "\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n/admin - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"

    await safe_reply(update, text)

async def help_create(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìù –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É:\n\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ Google Forms\n"
        "2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ä–º—É\n"
        "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ä–º—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "https://forms.google.com/–≤–∞—à–∞_—Ñ–æ—Ä–º–∞ –•–æ—á—É –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!")
    await safe_reply(update, help_text)

async def donate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = ("üíñ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:\n\n"
            f"–ÆMoney: {YOOMONEY_LINK}\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
    await safe_reply(update, text)

async def add_anket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("\n=== –û–ë–†–ê–ë–û–¢–ö–ê /add ===")
    try:
        if not update.message or not update.effective_user:
            logger.error("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        user_id = update.effective_user.id
        logger.info(f"User ID: {user_id}")

        if user_id in banned_users:
            logger.info("‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            await safe_reply(update, "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")
            return

        if user_id in user_ankets:
            last_time = last_post_times.get(user_id, 0)
            if time.time() - last_time < POST_COOLDOWN:
                remaining = int((POST_COOLDOWN - (time.time() - last_time)) // 60)
                logger.info(f"‚ö†Ô∏è –õ–∏–º–∏—Ç: {remaining} –º–∏–Ω –æ—Å—Ç–∞–ª–æ—Å—å")
                await safe_reply(update, f"‚ùå –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} –º–∏–Ω—É—Ç")
                return

            logger.info("‚ö†Ô∏è –£–∂–µ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞")
            await safe_reply(update, "‚ùå –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É (/delete)")
            return

        if context.user_data is None:
            context.user_data = {}

        context.user_data['awaiting_anket'] = True
        context.user_data['anket_user_id'] = user_id
        logger.info("‚úÖ –û–∂–∏–¥–∞–µ–º –∞–Ω–∫–µ—Ç—É (awaiting_anket=True)")

        await safe_reply(
            update,
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google Forms –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "https://forms.google.com/... –•–æ—á—É –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!")

    except Exception as e:
        logger.error(f"üî• –û—à–∏–±–∫–∞ –≤ add_anket: {e}")
        await safe_reply(update, "‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("\n=== –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï ===")
    try:
        if not update.message or not update.effective_user:
            logger.error("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        if context.user_data is None:
            context.user_data = {}

        user_id = update.effective_user.id
        text = update.message.text or ""

        logger.info(f"User ID: {user_id}")
        logger.info(f"Text: {text}")
        logger.info(f"Context user_data: {context.user_data}")

        if (not context.user_data.get('awaiting_anket', False)
                or context.user_data.get('anket_user_id') != user_id):
            logger.error("‚ùå –ù–µ –æ–∂–∏–¥–∞–µ–º –∞–Ω–∫–µ—Ç—É")
            return

        if any(word in text.lower() for word in BANNED_WORDS):
            logger.error("‚ùå –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞")
            await safe_reply(update, "‚ùå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞")
            log_action("BANNED_CONTENT", user_id, text)
            context.user_data['awaiting_anket'] = False
            return

        parts = text.split(maxsplit=1)
        if len(parts) < 2:
            logger.error("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —á–∞—Å—Ç–µ–π (–Ω—É–∂–Ω—ã url –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)")
            await safe_reply(update, "‚ùå –ù—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞ –ò –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
            return

        url, comment = parts
        logger.info(f"URL: {url}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")

        if not re.match(
                r'^https:\/\/(docs\.google\.com|forms\.office\.com|forms\.gle)\/.+',
                url):
            logger.error("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL")
            await safe_reply(
                update, "‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Forms –∏–ª–∏ Microsoft Forms")
            context.user_data['awaiting_anket'] = False
            return

        user_ankets[user_id] = {
            'url': url,
            'comment': comment,
            'time': time.time()
        }
        ankets_list.append((user_id, url, comment))
        last_post_times[user_id] = time.time()
        save_data()
        logger.info("‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ")

        if await publish_to_channel(user_id, url, comment, context):
            logger.info("‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª")
            await safe_reply(
                update, "‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª")
            await safe_reply(
                update,
                "‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π. –ê–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω."
            )
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–∫–µ—Ç—ã –æ—Ç @{update.effective_user.username}"
            )

    except Exception as e:
        logger.error(f"üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        if update.message:
            await safe_reply(
                update,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üö® –û—à–∏–±–∫–∞ –≤ handle_message:\n{str(e)}\n\nUser: {user_id}\nText: {text}"
        )

    finally:
        if context.user_data is not None:
            context.user_data['awaiting_anket'] = False
            if 'anket_user_id' in context.user_data:
                del context.user_data['anket_user_id']
            logger.info("‚úÖ –§–ª–∞–≥–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã")

async def view_ankets(update: Update,
                      context: ContextTypes.DEFAULT_TYPE,
                      page: int = 0):
    if not update.effective_user:
        return

    user_id = update.effective_user.id
    if not ankets_list:
        await safe_reply(update, "üò¢ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç")
        return

    if is_admin(user_id):
        keyboard = []
        for idx, (_, url, comment) in enumerate(
                ankets_list[page * ANKETS_PER_PAGE:(page + 1) *
                            ANKETS_PER_PAGE], 1):
            btn_text = f"–ê–Ω–∫–µ—Ç–∞ {idx}: {comment[:30]}..."
            keyboard.append([
                InlineKeyboardButton(btn_text, callback_data=f"view_{idx-1}")
            ])

        if len(ankets_list) > (page + 1) * ANKETS_PER_PAGE:
            keyboard.append([
                InlineKeyboardButton("–î–∞–ª–µ–µ ‚Üí", callback_data=f"page_{page+1}")
            ])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await safe_reply(update,
                         "üìã –í—Å–µ –∞–Ω–∫–µ—Ç—ã (–∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º):",
                         reply_markup=reply_markup)
        return

    unseen = [
        i for i, (uid, _, _) in enumerate(ankets_list)
        if uid != user_id and i not in viewed_ankets[user_id]
    ]

    if not unseen:
        await safe_reply(update, "‚ú® –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã!")
        return

    keyboard = []
    for idx in unseen[page * ANKETS_PER_PAGE:(page + 1) * ANKETS_PER_PAGE]:
        _, url, comment = ankets_list[idx]
        btn_text = f"–ê–Ω–∫–µ—Ç–∞ {idx+1}: {comment[:30]}..."
        keyboard.append(
            [InlineKeyboardButton(btn_text, callback_data=f"view_{idx}")])

    if len(unseen) > (page + 1) * ANKETS_PER_PAGE:
        keyboard.append(
            [InlineKeyboardButton("–î–∞–ª–µ–µ ‚Üí", callback_data=f"page_{page+1}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await safe_reply(update,
                     "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                     reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.callback_query or not update.effective_user:
        return

    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    data = query.data

    if data.startswith("view_"):
        idx = int(data[5:])
        _, url, comment = ankets_list[idx]

        if not is_admin(user_id):
            viewed_ankets[user_id].add(idx)
            save_data()

        await query.edit_message_text(
            f"üîó –°—Å—ã–ª–∫–∞: {url}\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
            "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /view")

    elif data.startswith("page_"):
        try:
            page = int(data[5:])
            await view_ankets(update, context, page)
        except (ValueError, IndexError) as e:
            logger.error(f"Error processing page data: {e}")
            await safe_reply(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

    elif data.startswith("admin_"):
        if data == "admin_view_all":
            await admin_view_all_ankets(update, context)
        elif data == "admin_ban":
            await query.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
            context.user_data['awaiting_ban'] = True
        elif data == "admin_delete":
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–Ω–∫–µ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            context.user_data['awaiting_delete'] = True
        elif data == "admin_unban":
            await query.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
            context.user_data['awaiting_unban'] = True

async def delete_anket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user:
        return

    user_id = update.effective_user.id
    if user_id not in user_ankets:
        await safe_reply(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    if user_id in channel_posts:
        try:
            await context.bot.delete_message(chat_id=CHANNEL_ID,
                                             message_id=channel_posts[user_id])
            del channel_posts[user_id]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")

    del user_ankets[user_id]
    ankets_list[:] = [a for a in ankets_list if a[0] != user_id]
    if user_id in last_post_times:
        del last_post_times[user_id]
    save_data()

    await safe_reply(update, "‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = ("üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
                 "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
                 "/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É\n"
                 "/view - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã\n"
                 "/delete - –£–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É\n"
                 "/help_create - –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É\n"
                 "/donate - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
                 "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
                 "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–Ω–∫–µ—Ç—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, "
                 "—á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    await safe_reply(update, help_text)

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user or not is_admin(update.effective_user.id):
        return

    keyboard = [[
        InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–Ω–∫–µ—Ç",
                             callback_data="admin_view_all")
    ],
                [
                    InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                         callback_data="admin_ban")
                ],
                [
                    InlineKeyboardButton("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                         callback_data="admin_unban")
                ],
                [
                    InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É",
                                         callback_data="admin_delete")
                ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)

async def admin_view_all_ankets(update: Update,
                                context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return

    text = "–í—Å–µ –∞–Ω–∫–µ—Ç—ã:\n\n"
    for idx, (user_id, url, comment) in enumerate(ankets_list, 1):
        try:
            user = await context.bot.get_chat(user_id)
            username = f"@{user.username}" if user.username else "–Ω–µ—Ç username"
            text += f"{idx}. {username} (ID: {user_id}): {comment}\n–°—Å—ã–ª–∫–∞: {url}\n\n"
        except Exception:
            text += f"{idx}. [–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] (ID: {user_id}): {comment}\n–°—Å—ã–ª–∫–∞: {url}\n\n"

    for i in range(0, len(text), 4000):
        await update.message.reply_text(text[i:i + 4000])

async def handle_admin_commands(update: Update,
                                context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_user or not is_admin(
            update.effective_user.id):
        return

    if context.user_data is None:
        context.user_data = {}

    if context.user_data.get('awaiting_ban', False):
        try:
            user_id = int(update.message.text)
            banned_users.add(user_id)
            save_data()
            await update.message.reply_text(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            log_action("BAN_USER", update.effective_user.id,
                       f"Banned {user_id}")
            context.user_data['awaiting_ban'] = False
        except Exception:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    elif context.user_data.get('awaiting_unban', False):
        try:
            user_id = int(update.message.text)
            if user_id in banned_users:
                banned_users.remove(user_id)
                save_data()
                await update.message.reply_text(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                log_action("UNBAN_USER", update.effective_user.id,
                           f"Unbanned {user_id}")
            else:
                await update.message.reply_text(
                    "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            context.user_data['awaiting_unban'] = False
        except Exception:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    elif context.user_data.get('awaiting_delete', False):
        try:
            text = update.message.text or ""
            if text.isdigit():
                idx = int(text) - 1
                if 0 <= idx < len(ankets_list):
                    user_id, url, comment = ankets_list.pop(idx)
                    if user_id in user_ankets:
                        del user_ankets[user_id]
                    if user_id in last_post_times:
                        del last_post_times[user_id]
                    save_data()

                    if user_id in channel_posts:
                        try:
                            await context.bot.delete_message(
                                chat_id=CHANNEL_ID,
                                message_id=channel_posts[user_id])
                            del channel_posts[user_id]
                        except Exception:
                            pass

                    await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞")
                    log_action("DELETE_ANKET", update.effective_user.id,
                               f"Deleted anketa {idx}")
                else:
                    await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∞–Ω–∫–µ—Ç—ã")
                context.user_data['awaiting_delete'] = False
            else:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∞–Ω–∫–µ—Ç—ã")

        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∞–Ω–∫–µ—Ç—ã")
        except Exception:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∞–Ω–∫–µ—Ç—ã")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    error = context.error
    logger.error(f'‚ö†Ô∏è –û—à–∏–±–∫–∞: {error}')

# ====== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ======
application = Application.builder().token(TOKEN).build()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("add", add_anket))
application.add_handler(CommandHandler("view", lambda u, c: view_ankets(u, c, 0)))
application.add_handler(CommandHandler("delete", delete_anket))
application.add_handler(CommandHandler("help", help_command))
application.add_handler(CommandHandler("help_create", help_create))
application.add_handler(CommandHandler("donate", donate))
application.add_handler(CommandHandler("admin", admin_panel))
application.add_handler(CallbackQueryHandler(button_handler))
application.add_handler(MessageHandler(
    filters.TEXT & ~filters.COMMAND & ~filters.User(ADMIN_ID),
    handle_message))
application.add_handler(MessageHandler(
    filters.TEXT & ~filters.COMMAND & filters.User(ADMIN_ID),
    handle_admin_commands))
application.add_error_handler(error_handler)

# ====== –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ======
def handle_signal(signum, frame):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    sys.exit(0)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, handle_signal)
    signal.signal(signal.SIGTERM, handle_signal)

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = Thread(target=run_flask, daemon=True)
    flask_thread.start()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
        WEBHOOK_URL = f"https://girlsbot.onrender.com/{TOKEN}"
        loop.run_until_complete(application.bot.set_webhook(WEBHOOK_URL))
        logger.info(f"üü¢ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        while True:
            time.sleep(3600)
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    except Exception as e:
        logger.error(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        save_data()
        logger.info("üõë –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É")

if __name__ == '__main__':
    main()
